{
    "sourceFile": "components/Columne.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1699014766264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1699014778814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,10 @@\n \r\n const Columne = ({id,todos,index}:Props) => {\r\n   const searchString =useBoardStore((state)=>state.searchString)\r\n   const { isOpen, onOpen, onClose } = useDisclosure()\r\n+\r\n+  if(isOpen)\r\n   return (\r\n      <Draggable draggableId={id} index={index}>\r\n             {(provided)=>(\r\n                 <div \r\n"
                },
                {
                    "date": 1699014785631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { useBoardStore } from \"@/store/BoardStore\";\r\n import TodoCard from \"./TodoCard\";\r\n import {AiFillPlusCircle} from \"react-icons/ai\"\r\n // import {useState} from \"react\"\r\n-import {useDisclosure} from \"@chakra-ui/react\"\r\n+import {ModalBody, useDisclosure} from \"@chakra-ui/react\"\r\n \r\n \r\n const Droppable = dynamic(\r\n   () =>\r\n@@ -41,9 +41,11 @@\n const Columne = ({id,todos,index}:Props) => {\r\n   const searchString =useBoardStore((state)=>state.searchString)\r\n   const { isOpen, onOpen, onClose } = useDisclosure()\r\n \r\n-  if(isOpen)\r\n+  if(isOpen){\r\n+    <ModalBody\r\n+  }\r\n   return (\r\n      <Draggable draggableId={id} index={index}>\r\n             {(provided)=>(\r\n                 <div \r\n"
                },
                {
                    "date": 1699014792392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n   const searchString =useBoardStore((state)=>state.searchString)\r\n   const { isOpen, onOpen, onClose } = useDisclosure()\r\n \r\n   if(isOpen){\r\n-    <ModalBody isOpen={is}\r\n+    <ModalBody isOpen={isO}\r\n   }\r\n   return (\r\n      <Draggable draggableId={id} index={index}>\r\n             {(provided)=>(\r\n"
                },
                {
                    "date": 1699014803307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n   const searchString =useBoardStore((state)=>state.searchString)\r\n   const { isOpen, onOpen, onClose } = useDisclosure()\r\n \r\n   if(isOpen){\r\n-    <ModalBody isOpen={isOpen} onOpen={onOpen}\r\n+    <ModalBody isOpen={isOpen} onOpen={onOpen} \r\n   }\r\n   return (\r\n      <Draggable draggableId={id} index={index}>\r\n             {(provided)=>(\r\n"
                }
            ],
            "date": 1699014766264,
            "name": "Commit-0",
            "content": "'use client'\r\nimport { Todo, TypedColumn } from \"@/typings\"\r\nimport dynamic from 'next/dynamic';\r\nimport { useBoardStore } from \"@/store/BoardStore\";\r\nimport TodoCard from \"./TodoCard\";\r\nimport {AiFillPlusCircle} from \"react-icons/ai\"\r\n// import {useState} from \"react\"\r\nimport {useDisclosure} from \"@chakra-ui/react\"\r\n\r\n\r\nconst Droppable = dynamic(\r\n  () =>\r\n    import('react-beautiful-dnd').then(mod => {\r\n      return mod.Droppable;\r\n    }),\r\n  {ssr: false},\r\n);\r\nconst Draggable = dynamic(\r\n  () =>\r\n    import('react-beautiful-dnd').then(mod => {\r\n      return mod.Draggable;\r\n    }),\r\n  {ssr: false},\r\n);\r\n\r\n\r\ntype Props={\r\n  id:TypedColumn,\r\n  todos:Todo[],\r\n  index:number\r\n}\r\n\r\nconst idToColumnText:{\r\n    [key in TypedColumn] :string\r\n}={\r\n    'todo':'To DO',\r\n    'inprogress':'In Progress',\r\n    'done':'Done'\r\n}\r\n\r\nconst Columne = ({id,todos,index}:Props) => {\r\n  const searchString =useBoardStore((state)=>state.searchString)\r\n  const { isOpen, onOpen, onClose } = useDisclosure()\r\n  return (\r\n     <Draggable draggableId={id} index={index}>\r\n            {(provided)=>(\r\n                <div \r\n                {...provided.draggableProps}\r\n                {...provided.dragHandleProps}\r\n                ref={provided.innerRef}\r\n                >\r\n                    {/* render droppable todos inside the droppable column */}\r\n                    <Droppable \r\n                    droppableId={index.toString()}\r\n                    // droppableId={'board'}\r\n                     type='card'>\r\n                        {(provided,snapshot)=>(\r\n                            <div\r\n                             {...provided.droppableProps}\r\n                            ref={provided.innerRef}\r\n                            className={`pb-2 p-2 rounded-2xl shadow-sm ${snapshot.isDraggingOver ?\"bg-green-200\":\"bg-white/40\"}`}\r\n                            >\r\n                                <h2 className=\"flex justify-between font-bold text-xl p-2\">\r\n                                    {idToColumnText[id]}\r\n                                \r\n                                <span className=\"text-gray-500 bg-gray-200 \r\n                                rounded-full px-2 py-1 text-sm font-normal\">{!searchString ? todos.length:todos.filter(todo=>todo.title.toLocaleLowerCase().includes(searchString.toLowerCase())).length}</span>\r\n                                </h2>\r\n\r\n                                <div className=\"space-y-2\">\r\n                                {todos.map((todo,index)=>{\r\n                                    if(searchString && !todo.title.toLocaleLowerCase().includes(searchString.toLowerCase())) return null\r\n                                    return(\r\n                                    <Draggable key={todo.title} draggableId={todo.title} index={index}>\r\n                                            {(provided)=>(\r\n                                                <TodoCard \r\n                                                todo={todo}\r\n                                                index={index}\r\n                                                id={id}\r\n                                                innerRef={provided.innerRef}\r\n                                                draggableProps={provided.draggableProps}\r\n                                                dragHandleProps={provided.dragHandleProps}/>\r\n                                            )}\r\n                                    </Draggable>\r\n                                )})}\r\n                                    {provided.placeholder}\r\n                                    <div className='flex items-end justify-end p-2'>\r\n                                        <button onClick={onOpen} className=\"text-green-500 hover:text-green-600\">\r\n                                            <AiFillPlusCircle className=\"h-10 w-10 \"/>\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                            \r\n                        }\r\n                    </Droppable>\r\n                </div>\r\n            )}\r\n        </Draggable>\r\n  )\r\n}\r\n\r\nexport default Columne"
        }
    ]
}