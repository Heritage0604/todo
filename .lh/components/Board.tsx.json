{
    "sourceFile": "components/Board.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1699057173980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1699057181077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n \r\n       // this step is needed as the indexes are stored as numbers 0,1,2, etc .instead of id's with DND library\r\n \r\n       const columns=Array.from(board.columns);\r\n-      console.log(columns)\r\n+   \r\n       const startColIndex=columns[Number(source.droppableId)]\r\n       console.log(startColIndex)\r\n       const finishColIndex=columns[Number(destination.droppableId)]\r\n       console.log(finishColIndex)\r\n"
                },
                {
                    "date": 1717698007167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,11 +47,11 @@\n \r\n       const columns=Array.from(board.columns);\r\n    \r\n       const startColIndex=columns[Number(source.droppableId)]\r\n-      console.log(startColIndex)\r\n+      \r\n       const finishColIndex=columns[Number(destination.droppableId)]\r\n-      console.log(finishColIndex)\r\n+     \r\n \r\n      const startCol:Column={\r\n       id:startColIndex[0],\r\n       todos:startColIndex[1].todos\r\n@@ -102,9 +102,9 @@\n       setBoard({...board,columns:newColumns})\r\n \r\n       myResult.then((result)=>{\r\n         if (result == 'Success'){\r\n-          toast('ðŸ¦„ Todo List Updated', {\r\n+          toast(' Todo List Updated', {\r\n position: \"top-center\",\r\n autoClose: 1500,\r\n hideProgressBar: false,\r\n closeOnClick: true,\r\n"
                },
                {
                    "date": 1717698028779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,18 +102,9 @@\n       setBoard({...board,columns:newColumns})\r\n \r\n       myResult.then((result)=>{\r\n         if (result == 'Success'){\r\n-          toast(' Todo List Updated', {\r\n-position: \"top-center\",\r\n-autoClose: 1500,\r\n-hideProgressBar: false,\r\n-closeOnClick: true,\r\n-pauseOnHover: true,\r\n-draggable: true,\r\n-progress: undefined,\r\n-theme: \"light\",\r\n-});\r\n+          \r\n         }\r\n         else{\r\n toast.error('An Error Ocurred', {\r\n position: \"top-center\",\r\n"
                },
                {
                    "date": 1717698045894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,18 @@\n       setBoard({...board,columns:newColumns})\r\n \r\n       myResult.then((result)=>{\r\n         if (result == 'Success'){\r\n-          \r\n+          toast.error('An Error Ocurred', {\r\n+position: \"top-center\",\r\n+autoClose: 1500,\r\n+hideProgressBar: false,\r\n+closeOnClick: true,\r\n+pauseOnHover: true,\r\n+draggable: true,\r\n+progress: undefined,\r\n+theme: \"light\",\r\n+});\r\n         }\r\n         else{\r\n toast.error('An Error Ocurred', {\r\n position: \"top-center\",\r\n"
                },
                {
                    "date": 1717698058386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n       setBoard({...board,columns:newColumns})\r\n \r\n       myResult.then((result)=>{\r\n         if (result == 'Success'){\r\n-          toast.error('An Error Ocurred', {\r\n+          toast.success('Todo List u', {\r\n position: \"top-center\",\r\n autoClose: 1500,\r\n hideProgressBar: false,\r\n closeOnClick: true,\r\n"
                },
                {
                    "date": 1717698067548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n       setBoard({...board,columns:newColumns})\r\n \r\n       myResult.then((result)=>{\r\n         if (result == 'Success'){\r\n-          toast.success('Todo List u', {\r\n+          toast.success('Todo List updated successfully', {\r\n position: \"top-center\",\r\n autoClose: 1500,\r\n hideProgressBar: false,\r\n closeOnClick: true,\r\n"
                }
            ],
            "date": 1699057173980,
            "name": "Commit-0",
            "content": "'use client'\r\nimport { useBoardStore } from '@/store/BoardStore'\r\nimport React,{useEffect} from 'react'\r\nimport {DragDropContext,DropResult} from \"react-beautiful-dnd\"\r\nimport Columne from './Columne'\r\nimport dynamic from 'next/dynamic';\r\nimport { Column } from '@/typings'\r\nimport {toast} from \"react-toastify\" \r\n\r\n\r\nconst Droppable = dynamic(\r\n  () =>\r\n    import('react-beautiful-dnd').then(mod => {\r\n      return mod.Droppable;\r\n    }),\r\n  {ssr: false},\r\n);\r\nconst Draggable = dynamic(\r\n  () =>\r\n    import('react-beautiful-dnd').then(mod => {\r\n      return mod.Draggable;\r\n    }),\r\n  {ssr: false},\r\n);\r\n\r\nconst Board = () => {\r\n\r\n  const [board,getBoard,setBoard,updateTodoInDB]=useBoardStore((state)=>[state.board,state.getBoard,state.setBoard,state.updateTodoInDB])\r\n\r\n  \r\n    const handleDragEnd=(result:DropResult)=>{\r\n     const {destination,source,type}=result; \r\n      if(!destination) return;\r\n      \r\n      // handle the column drag\r\n\r\n      if(type==='column'){\r\n        const entries=Array.from(board.columns.entries())\r\n        const [removed]=entries.splice(source.index,1)\r\n        entries.splice(destination.index,0,removed)\r\n        const rearrangedColums=new Map(entries)\r\n        setBoard({...board,columns:rearrangedColums})\r\n        return\r\n      }\r\n\r\n      // this step is needed as the indexes are stored as numbers 0,1,2, etc .instead of id's with DND library\r\n\r\n      const columns=Array.from(board.columns);\r\n      console.log(columns)\r\n      const startColIndex=columns[Number(source.droppableId)]\r\n      console.log(startColIndex)\r\n      const finishColIndex=columns[Number(destination.droppableId)]\r\n      console.log(finishColIndex)\r\n\r\n     const startCol:Column={\r\n      id:startColIndex[0],\r\n      todos:startColIndex[1].todos\r\n     }\r\n\r\n     const finishCol:Column={\r\n      id:finishColIndex[0],\r\n      todos:finishColIndex[1].todos\r\n     }\r\n\r\n     if(!startCol || !finishCol) return\r\n\r\n     if(source.index== destination.index && startCol == finishCol) return\r\n\r\n     const newTodos =startCol.todos\r\n     const [todoMoved] = newTodos.splice(source.index,1)\r\n\r\n     if(startCol.id == finishCol.id){\r\n      // same column task drive\r\n      newTodos.splice(destination.index,0,todoMoved)\r\n      const newCol={\r\n        id:startCol.id,\r\n        todos:newTodos\r\n      }\r\n      const newColumns=new Map(board.columns)\r\n      newColumns.set(startCol.id,newCol)\r\n      setBoard({...board,columns:newColumns})\r\n     }\r\n\r\n\r\n      else{\r\n      // dragging to a different column\r\n      const finishTodos=Array.from(finishCol.todos)\r\n      finishTodos.splice(destination.index,0,todoMoved)\r\n            const newCol={\r\n        id:startCol.id,\r\n        todos:newTodos\r\n      }\r\n         const newColumns=new Map(board.columns)\r\n      newColumns.set(startCol.id,newCol)\r\n      newColumns.set(finishCol.id,{\r\n        id:finishCol.id,\r\n        todos:finishTodos\r\n      })\r\n\r\n      const myResult: Promise<\"Success\" | \"Failure\"> = updateTodoInDB(todoMoved,finishCol.id)\r\n    \r\n      setBoard({...board,columns:newColumns})\r\n\r\n      myResult.then((result)=>{\r\n        if (result == 'Success'){\r\n          toast('ðŸ¦„ Todo List Updated', {\r\nposition: \"top-center\",\r\nautoClose: 1500,\r\nhideProgressBar: false,\r\ncloseOnClick: true,\r\npauseOnHover: true,\r\ndraggable: true,\r\nprogress: undefined,\r\ntheme: \"light\",\r\n});\r\n        }\r\n        else{\r\ntoast.error('An Error Ocurred', {\r\nposition: \"top-center\",\r\nautoClose: 1500,\r\nhideProgressBar: false,\r\ncloseOnClick: true,\r\npauseOnHover: true,\r\ndraggable: true,\r\nprogress: undefined,\r\ntheme: \"light\",\r\n});\r\n        }\r\n      })\r\n\r\n     }\r\n\r\n    }\r\n\r\n    useEffect(()=>{\r\n        getBoard()\r\n    },[getBoard])\r\n  return (\r\n  <DragDropContext onDragEnd={handleDragEnd}>\r\n<Droppable droppableId='board' direction='horizontal' type='column'>\r\n    {(provided)=>{\r\n        return(\r\n            <div\r\n            {...provided.droppableProps}\r\n            ref={provided.innerRef}\r\n            className='grid grid-cols-1 md:grid-cols-3 gap-5 max-w-7xl mx-auto'\r\n            >\r\n\r\n              {Array.from(board.columns.entries()).map(([id,column],index)=>{\r\n                \r\n                return(\r\n                <Columne key={id} id={id} todos={column.todos} index={index} />\r\n                )\r\n              })}\r\n              {provided.placeholder}\r\n            </div>\r\n        )\r\n    }}\r\n</Droppable>\r\n  </DragDropContext>\r\n  )\r\n}\r\n\r\nexport default Board"
        }
    ]
}