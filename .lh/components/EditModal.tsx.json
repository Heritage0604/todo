{
    "sourceFile": "components/EditModal.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 25,
            "patches": [
                {
                    "date": 1699116648894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1699116908511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,19 @@\n-tsr\n\\ No newline at end of file\n+import React from 'react'\r\n+import {\r\n+  Modal,\r\n+  ModalOverlay,\r\n+  ModalContent,\r\n+  ModalHeader,\r\n+  ModalFooter,\r\n+  ModalBody,\r\n+  ModalCloseButton,\r\n+} from '@chakra-ui/react'\r\n+type Props = {}\r\n+\r\n+const EditModal = (props: Props) => {\r\n+  return (\r\n+    <div>EditModal</div>\r\n+  )\r\n+}\r\n+\r\n+export default EditModal\n\\ No newline at end of file\n"
                },
                {
                    "date": 1699116917546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+'use client'\r\n import React from 'react'\r\n import {\r\n   Modal,\r\n   ModalOverlay,\r\n"
                },
                {
                    "date": 1699117205500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,11 @@\n   ModalFooter,\r\n   ModalBody,\r\n   ModalCloseButton,\r\n } from '@chakra-ui/react'\r\n-type Props = {}\r\n+type Props = {\r\n+  \r\n+}\r\n \r\n const EditModal = (props: Props) => {\r\n   return (\r\n     <div>EditModal</div>\r\n"
                },
                {
                    "date": 1699117216904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,13 @@\n   ModalBody,\r\n   ModalCloseButton,\r\n } from '@chakra-ui/react'\r\n type Props = {\r\n-  \r\n+  isOpen:boolean,\r\n+  onClose:()=>void,\r\n+  onOpen:()=>void,\r\n+  todoType:TypedColumn,\r\n+  setTodoType:(todo:TypedColumn)=>void,\r\n }\r\n \r\n const EditModal = (props: Props) => {\r\n   return (\r\n"
                },
                {
                    "date": 1699117231684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   todoType:TypedColumn,\r\n   setTodoType:(todo:TypedColumn)=>void,\r\n }\r\n \r\n-const EditModal = (props: Props) => {\r\n+const EditModal = ({isOpen,onClose,onOpen,todoType,setTodoType}: Props) => {\r\n   return (\r\n     <div>EditModal</div>\r\n   )\r\n }\r\n"
                },
                {
                    "date": 1699117237879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,27 @@\n+'use client'\r\n+import React from 'react'\r\n+import {\r\n+  Modal,\r\n+  ModalOverlay,\r\n+  ModalContent,\r\n+  ModalHeader,\r\n+  ModalFooter,\r\n+  ModalBody,\r\n+  ModalCloseButton,\r\n+} from '@chakra-ui/react'\r\n+import { TypedColumn } from '@/typings'\r\n+type Props = {\r\n+  isOpen:boolean,\r\n+  onClose:()=>void,\r\n+  onOpen:()=>void,\r\n+  todoType:TypedColumn,\r\n+  setTodoType:(todo:TypedColumn)=>void,\r\n+}\r\n+\r\n+const EditModal = ({isOpen,onClose,onOpen,todoType,setTodoType}: Props) => {\r\n+  return (\r\n+    <div>EditModal</div>\r\n+  )\r\n+}\r\n+\r\n+export default EditModal\n\\ No newline at end of file\n"
                },
                {
                    "date": 1699117543185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,35 +19,25 @@\n }\r\n \r\n const EditModal = ({isOpen,onClose,onOpen,todoType,setTodoType}: Props) => {\r\n   return (\r\n-    <div>EditModal</div>\r\n-  )\r\n-}\r\n+    <Modal isOpen={isOpen} onClose={onClose}>\r\n+        <ModalOverlay />\r\n+        <ModalContent>\r\n+          <ModalHeader>Modal Title</ModalHeader>\r\n+          <ModalCloseButton />\r\n+          <ModalBody>\r\n+            <Lorem count={2} />\r\n+          </ModalBody>\r\n \r\n-export default EditModal\n-'use client'\r\n-import React from 'react'\r\n-import {\r\n-  Modal,\r\n-  ModalOverlay,\r\n-  ModalContent,\r\n-  ModalHeader,\r\n-  ModalFooter,\r\n-  ModalBody,\r\n-  ModalCloseButton,\r\n-} from '@chakra-ui/react'\r\n-type Props = {\r\n-  isOpen:boolean,\r\n-  onClose:()=>void,\r\n-  onOpen:()=>void,\r\n-  todoType:TypedColumn,\r\n-  setTodoType:(todo:TypedColumn)=>void,\r\n-}\r\n-\r\n-const EditModal = ({isOpen,onClose,onOpen,todoType,setTodoType}: Props) => {\r\n-  return (\r\n-    <div>EditModal</div>\r\n+          <ModalFooter>\r\n+            <Button colorScheme='blue' mr={3} onClick={onClose}>\r\n+              Close\r\n+            </Button>\r\n+            <Button variant='ghost'>Secondary Action</Button>\r\n+          </ModalFooter>\r\n+        </ModalContent>\r\n+      </Modal>\r\n   )\r\n }\r\n \r\n export default EditModal\n\\ No newline at end of file\n"
                },
                {
                    "date": 1699117552267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n   ModalHeader,\r\n   ModalFooter,\r\n   ModalBody,\r\n   ModalCloseButton,\r\n+  Button,\r\n } from '@chakra-ui/react'\r\n import { TypedColumn } from '@/typings'\r\n type Props = {\r\n   isOpen:boolean,\r\n"
                },
                {
                    "date": 1699117560051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,44 @@\n+'use client'\r\n+import React from 'react'\r\n+import {\r\n+  Modal,\r\n+  ModalOverlay,\r\n+  ModalContent,\r\n+  ModalHeader,\r\n+  ModalFooter,\r\n+  ModalBody,\r\n+  ModalCloseButton,\r\n+  Button,\r\n+} from '@chakra-ui/react'\r\n+import { TypedColumn } from '@/typings'\r\n+type Props = {\r\n+  isOpen:boolean,\r\n+  onClose:()=>void,\r\n+  onOpen:()=>void,\r\n+  todoType:TypedColumn,\r\n+  setTodoType:(todo:TypedColumn)=>void,\r\n+}\r\n+\r\n+const EditModal = ({isOpen,onClose,onOpen,todoType,setTodoType}: Props) => {\r\n+  return (\r\n+    <Modal isOpen={isOpen} onClose={onClose}>\r\n+        <ModalOverlay />\r\n+        <ModalContent>\r\n+          <ModalHeader>Modal Title</ModalHeader>\r\n+          <ModalCloseButton />\r\n+          <ModalBody>\r\n+            lorem\r\n+          </ModalBody>\r\n+\r\n+          <ModalFooter>\r\n+            <Button colorScheme='blue' mr={3} onClick={onClose}>\r\n+              Close\r\n+            </Button>\r\n+            <Button variant='ghost'>Secondary Action</Button>\r\n+          </ModalFooter>\r\n+        </ModalContent>\r\n+      </Modal>\r\n+  )\r\n+}\r\n+\r\n+export default EditModal\n\\ No newline at end of file\n"
                },
                {
                    "date": 1699117700734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,109 @@\n+'use client'\r\n+import React,{useState,useEffect} from \"react\"\r\n+import {\r\n+  Modal,\r\n+  ModalOverlay,\r\n+  ModalContent,\r\n+  ModalHeader,\r\n+  ModalFooter,\r\n+  ModalBody,\r\n+  ModalCloseButton,\r\n+  Button,\r\n+  Input,\r\n+} from '@chakra-ui/react'\r\n+\r\n+import { TypedColumn } from \"@/typings\"\r\n+import TodoList from \"./TodoList\"\r\n+import Image from \"next/image\"\r\n+import { MdCancel } from \"react-icons/md\"\r\n+import { useBoardStore } from \"@/store/BoardStore\"\r\n+\r\n+type Props={\r\n+  isOpen:boolean,\r\n+  onClose:()=>void,\r\n+  onOpen:()=>void,\r\n+  todoType:TypedColumn,\r\n+  setTodoType:(todo:TypedColumn)=>void,\r\n+}\r\n+\r\n+ const ModalBodyForm=({isOpen,onClose,onOpen,todoType,setTodoType}:Props)=>{\r\n+  const [image,setImage]=useState('')\r\n+  const [task,setTask]=useState(\"\")\r\n+  const addToDB=useBoardStore((state)=>state.addToDB)\r\n+\r\n+   const onSelectImage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n+    const reader = new FileReader();\r\n+    if (event.target.files?.[0]) {\r\n+      reader.readAsDataURL(event.target.files[0]);\r\n+    }\r\n+\r\n+    reader.onload = (readerEvent) => {\r\n+      if (readerEvent.target?.result) {\r\n+        setImage(readerEvent.target?.result as string);\r\n+      }\r\n+    };\r\n+  };\r\n+  \r\n+  const onRemoveImage=()=>{\r\n+      setImage('')\r\n+  }\r\n+\r\n+  const onSubmit=()=>{\r\n+    if(image){\r\n+      addToDB(task,todoType,image)\r\n+      onClose()\r\n+      return\r\n+    }\r\n+    else{\r\n+      addToDB(task,todoType)\r\n+    }\r\n+    \r\n+  }\r\n+\r\n+return (\r\n+    <div>\r\n+         <Modal isOpen={isOpen} onClose={onClose}>\r\n+        <ModalOverlay />\r\n+        <ModalContent>\r\n+          <ModalHeader>Add a Task</ModalHeader>\r\n+          <ModalCloseButton />\r\n+          <ModalBody>\r\n+            \r\n+            <Input value={task} onChange={(e)=>setTask(e.target.value)} placeholder='Add a task...' />\r\n+\r\n+              <TodoList setTodoType={setTodoType} todoType={todoType} color='bg-red-500' title={'todo'} text={\"A new task to be completed\"}/>\r\n+              <TodoList setTodoType={setTodoType} todoType={todoType} color='bg-yellow-500' title={'inprogress'} text={\"A task that is currently being worked on\"} />\r\n+              <TodoList setTodoType={setTodoType} todoType={todoType} color='bg-green-500' title={'done'} text={\"A task thats has been completed\"}/>\r\n+\r\n+            {image && (\r\n+              <div className='mt-6 relative'>\r\n+                <Image alt='Todo Image' className='w-full h-40 object-cover' src={image} width={300} height={300}/>\r\n+                 <button onClick={onRemoveImage} className='text-red-500 absolute top-0 right-0 hover:text-red-600'>\r\n+                <MdCancel className='ml-5 h-8 w-8'/>\r\n+            </button>\r\n+              </div>\r\n+            )}\r\n+\r\n+              <label   className='mt-2 h-16 cursor-pointer bg-gray-300 text-sm text-gray-500 rounded-lg border flex justify-center items-center w-full'>\r\n+     \r\n+<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"ml-1 mr-1 w-4 h-4\">\r\n+  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5m-13.5-9L12 3m0 0l4.5 4.5M12 3v13.5\" />\r\n+</svg>\r\n+     Upload\r\n+<input type=\"file\" onChange={onSelectImage} className='hidden' accept=\"image/*\"  />\r\n+\r\n+        </label>\r\n+        \r\n+\r\n+          </ModalBody>\r\n+\r\n+          <ModalFooter>\r\n+            <Button variant='ghost' onClick={onSubmit}>Add Task</Button>\r\n+          </ModalFooter>\r\n+        </ModalContent>\r\n+      </Modal>\r\n+    </div>\r\n+)\r\n+}\r\n+\r\n+export default ModalBodyForm\n\\ No newline at end of file\n"
                },
                {
                    "date": 1699117714423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n   todoType:TypedColumn,\r\n   setTodoType:(todo:TypedColumn)=>void,\r\n }\r\n \r\n- const ModalBodyForm=({isOpen,onClose,onOpen,todoType,setTodoType}:Props)=>{\r\n+ const EditModal=({isOpen,onClose,onOpen,todoType,setTodoType}:Props)=>{\r\n   const [image,setImage]=useState('')\r\n   const [task,setTask]=useState(\"\")\r\n   const addToDB=useBoardStore((state)=>state.addToDB)\r\n \r\n@@ -105,93 +105,5 @@\n     </div>\r\n )\r\n }\r\n \r\n-export default ModalBodyForm\n-'use client'\r\n-import React from 'react'\r\n-import {\r\n-  Modal,\r\n-  ModalOverlay,\r\n-  ModalContent,\r\n-  ModalHeader,\r\n-  ModalFooter,\r\n-  ModalBody,\r\n-  ModalCloseButton,\r\n-  Button,\r\n-} from '@chakra-ui/react'\r\n-import { TypedColumn } from '@/typings'\r\n-type Props = {\r\n-  isOpen:boolean,\r\n-  onClose:()=>void,\r\n-  onOpen:()=>void,\r\n-  todoType:TypedColumn,\r\n-  setTodoType:(todo:TypedColumn)=>void,\r\n-}\r\n-\r\n-const EditModal = ({isOpen,onClose,onOpen,todoType,setTodoType}: Props) => {\r\n-  return (\r\n-    <Modal isOpen={isOpen} onClose={onClose}>\r\n-        <ModalOverlay />\r\n-        <ModalContent>\r\n-          <ModalHeader>Modal Title</ModalHeader>\r\n-          <ModalCloseButton />\r\n-          <ModalBody>\r\n-            lorem\r\n-          </ModalBody>\r\n-\r\n-          <ModalFooter>\r\n-            <Button colorScheme='blue' mr={3} onClick={onClose}>\r\n-              Close\r\n-            </Button>\r\n-            <Button variant='ghost'>Secondary Action</Button>\r\n-          </ModalFooter>\r\n-        </ModalContent>\r\n-      </Modal>\r\n-  )\r\n-}\r\n-\r\n-export default EditModal\n-'use client'\r\n-import React from 'react'\r\n-import {\r\n-  Modal,\r\n-  ModalOverlay,\r\n-  ModalContent,\r\n-  ModalHeader,\r\n-  ModalFooter,\r\n-  ModalBody,\r\n-  ModalCloseButton,\r\n-  Button,\r\n-} from '@chakra-ui/react'\r\n-import { TypedColumn } from '@/typings'\r\n-type Props = {\r\n-  isOpen:boolean,\r\n-  onClose:()=>void,\r\n-  onOpen:()=>void,\r\n-  todoType:TypedColumn,\r\n-  setTodoType:(todo:TypedColumn)=>void,\r\n-}\r\n-\r\n-const EditModal = ({isOpen,onClose,onOpen,todoType,setTodoType}: Props) => {\r\n-  return (\r\n-    <Modal isOpen={isOpen} onClose={onClose}>\r\n-        <ModalOverlay />\r\n-        <ModalContent>\r\n-          <ModalHeader>Modal Title</ModalHeader>\r\n-          <ModalCloseButton />\r\n-          <ModalBody>\r\n-            <Lorem count={2} />\r\n-          </ModalBody>\r\n-\r\n-          <ModalFooter>\r\n-            <Button colorScheme='blue' mr={3} onClick={onClose}>\r\n-              Close\r\n-            </Button>\r\n-            <Button variant='ghost'>Secondary Action</Button>\r\n-          </ModalFooter>\r\n-        </ModalContent>\r\n-      </Modal>\r\n-  )\r\n-}\r\n-\r\n-export default EditModal\n\\ No newline at end of file\n+export default ModalBodyForm\n\\ No newline at end of file\n"
                },
                {
                    "date": 1699117722655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,5 +105,5 @@\n     </div>\r\n )\r\n }\r\n \r\n-export default ModalBodyForm\n\\ No newline at end of file\n+export default EditModal\n\\ No newline at end of file\n"
                },
                {
                    "date": 1699117891414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n   onClose:()=>void,\r\n   onOpen:()=>void,\r\n   todoType:TypedColumn,\r\n   setTodoType:(todo:TypedColumn)=>void,\r\n+  title:string\r\n }\r\n \r\n  const EditModal=({isOpen,onClose,onOpen,todoType,setTodoType}:Props)=>{\r\n   const [image,setImage]=useState('')\r\n"
                },
                {
                    "date": 1699117911028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,11 +26,11 @@\n   setTodoType:(todo:TypedColumn)=>void,\r\n   title:string\r\n }\r\n \r\n- const EditModal=({isOpen,onClose,onOpen,todoType,setTodoType}:Props)=>{\r\n+ const EditModal=({title,isOpen,onClose,onOpen,todoType,setTodoType}:Props)=>{\r\n   const [image,setImage]=useState('')\r\n-  const [task,setTask]=useState(\"\")\r\n+  const [task,setTask]=useState(title)\r\n   const addToDB=useBoardStore((state)=>state.addToDB)\r\n \r\n    const onSelectImage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n     const reader = new FileReader();\r\n"
                },
                {
                    "date": 1699118058631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,111 @@\n+'use client'\r\n+import React,{useState,useEffect} from \"react\"\r\n+import {\r\n+  Modal,\r\n+  ModalOverlay,\r\n+  ModalContent,\r\n+  ModalHeader,\r\n+  ModalFooter,\r\n+  ModalBody,\r\n+  ModalCloseButton,\r\n+  Button,\r\n+  Input,\r\n+} from '@chakra-ui/react'\r\n+\r\n+import { TypedColumn } from \"@/typings\"\r\n+import TodoList from \"./TodoList\"\r\n+import Image from \"next/image\"\r\n+import { MdCancel } from \"react-icons/md\"\r\n+import { useBoardStore } from \"@/store/BoardStore\"\r\n+\r\n+type Props={\r\n+  isOpen:boolean,\r\n+  onClose:()=>void,\r\n+  onOpen:()=>void,\r\n+  todoType:TypedColumn,\r\n+  setTodoType:(todo:TypedColumn)=>void,\r\n+  title:string,\r\n+I\r\n+}\r\n+\r\n+ const EditModal=({title,isOpen,onClose,onOpen,todoType,setTodoType}:Props)=>{\r\n+  const [image,setImage]=useState('')\r\n+  const [task,setTask]=useState(title)\r\n+  const addToDB=useBoardStore((state)=>state.addToDB)\r\n+\r\n+   const onSelectImage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n+    const reader = new FileReader();\r\n+    if (event.target.files?.[0]) {\r\n+      reader.readAsDataURL(event.target.files[0]);\r\n+    }\r\n+\r\n+    reader.onload = (readerEvent) => {\r\n+      if (readerEvent.target?.result) {\r\n+        setImage(readerEvent.target?.result as string);\r\n+      }\r\n+    };\r\n+  };\r\n+  \r\n+  const onRemoveImage=()=>{\r\n+      setImage('')\r\n+  }\r\n+\r\n+  const onSubmit=()=>{\r\n+    if(image){\r\n+      addToDB(task,todoType,image)\r\n+      onClose()\r\n+      return\r\n+    }\r\n+    else{\r\n+      addToDB(task,todoType)\r\n+    }\r\n+    \r\n+  }\r\n+\r\n+return (\r\n+    <div>\r\n+         <Modal isOpen={isOpen} onClose={onClose}>\r\n+        <ModalOverlay />\r\n+        <ModalContent>\r\n+          <ModalHeader>Add a Task</ModalHeader>\r\n+          <ModalCloseButton />\r\n+          <ModalBody>\r\n+            \r\n+            <Input value={task} onChange={(e)=>setTask(e.target.value)} placeholder='Add a task...' />\r\n+\r\n+              <TodoList setTodoType={setTodoType} todoType={todoType} color='bg-red-500' title={'todo'} text={\"A new task to be completed\"}/>\r\n+              <TodoList setTodoType={setTodoType} todoType={todoType} color='bg-yellow-500' title={'inprogress'} text={\"A task that is currently being worked on\"} />\r\n+              <TodoList setTodoType={setTodoType} todoType={todoType} color='bg-green-500' title={'done'} text={\"A task thats has been completed\"}/>\r\n+\r\n+            {image && (\r\n+              <div className='mt-6 relative'>\r\n+                <Image alt='Todo Image' className='w-full h-40 object-cover' src={image} width={300} height={300}/>\r\n+                 <button onClick={onRemoveImage} className='text-red-500 absolute top-0 right-0 hover:text-red-600'>\r\n+                <MdCancel className='ml-5 h-8 w-8'/>\r\n+            </button>\r\n+              </div>\r\n+            )}\r\n+\r\n+              <label   className='mt-2 h-16 cursor-pointer bg-gray-300 text-sm text-gray-500 rounded-lg border flex justify-center items-center w-full'>\r\n+     \r\n+<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"ml-1 mr-1 w-4 h-4\">\r\n+  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5m-13.5-9L12 3m0 0l4.5 4.5M12 3v13.5\" />\r\n+</svg>\r\n+     Upload\r\n+<input type=\"file\" onChange={onSelectImage} className='hidden' accept=\"image/*\"  />\r\n+\r\n+        </label>\r\n+        \r\n+\r\n+          </ModalBody>\r\n+\r\n+          <ModalFooter>\r\n+            <Button variant='ghost' onClick={onSubmit}>Add Task</Button>\r\n+          </ModalFooter>\r\n+        </ModalContent>\r\n+      </Modal>\r\n+    </div>\r\n+)\r\n+}\r\n+\r\n+export default EditModal\n\\ No newline at end of file\n"
                },
                {
                    "date": 1699118064645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n   onOpen:()=>void,\r\n   todoType:TypedColumn,\r\n   setTodoType:(todo:TypedColumn)=>void,\r\n   title:string,\r\n-I\r\n+  Image:\r\n }\r\n \r\n  const EditModal=({title,isOpen,onClose,onOpen,todoType,setTodoType}:Props)=>{\r\n   const [image,setImage]=useState('')\r\n@@ -107,115 +107,5 @@\n     </div>\r\n )\r\n }\r\n \r\n-export default EditModal\n-'use client'\r\n-import React,{useState,useEffect} from \"react\"\r\n-import {\r\n-  Modal,\r\n-  ModalOverlay,\r\n-  ModalContent,\r\n-  ModalHeader,\r\n-  ModalFooter,\r\n-  ModalBody,\r\n-  ModalCloseButton,\r\n-  Button,\r\n-  Input,\r\n-} from '@chakra-ui/react'\r\n-\r\n-import { TypedColumn } from \"@/typings\"\r\n-import TodoList from \"./TodoList\"\r\n-import Image from \"next/image\"\r\n-import { MdCancel } from \"react-icons/md\"\r\n-import { useBoardStore } from \"@/store/BoardStore\"\r\n-\r\n-type Props={\r\n-  isOpen:boolean,\r\n-  onClose:()=>void,\r\n-  onOpen:()=>void,\r\n-  todoType:TypedColumn,\r\n-  setTodoType:(todo:TypedColumn)=>void,\r\n-  title:string\r\n-}\r\n-\r\n- const EditModal=({title,isOpen,onClose,onOpen,todoType,setTodoType}:Props)=>{\r\n-  const [image,setImage]=useState('')\r\n-  const [task,setTask]=useState(title)\r\n-  const addToDB=useBoardStore((state)=>state.addToDB)\r\n-\r\n-   const onSelectImage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n-    const reader = new FileReader();\r\n-    if (event.target.files?.[0]) {\r\n-      reader.readAsDataURL(event.target.files[0]);\r\n-    }\r\n-\r\n-    reader.onload = (readerEvent) => {\r\n-      if (readerEvent.target?.result) {\r\n-        setImage(readerEvent.target?.result as string);\r\n-      }\r\n-    };\r\n-  };\r\n-  \r\n-  const onRemoveImage=()=>{\r\n-      setImage('')\r\n-  }\r\n-\r\n-  const onSubmit=()=>{\r\n-    if(image){\r\n-      addToDB(task,todoType,image)\r\n-      onClose()\r\n-      return\r\n-    }\r\n-    else{\r\n-      addToDB(task,todoType)\r\n-    }\r\n-    \r\n-  }\r\n-\r\n-return (\r\n-    <div>\r\n-         <Modal isOpen={isOpen} onClose={onClose}>\r\n-        <ModalOverlay />\r\n-        <ModalContent>\r\n-          <ModalHeader>Add a Task</ModalHeader>\r\n-          <ModalCloseButton />\r\n-          <ModalBody>\r\n-            \r\n-            <Input value={task} onChange={(e)=>setTask(e.target.value)} placeholder='Add a task...' />\r\n-\r\n-              <TodoList setTodoType={setTodoType} todoType={todoType} color='bg-red-500' title={'todo'} text={\"A new task to be completed\"}/>\r\n-              <TodoList setTodoType={setTodoType} todoType={todoType} color='bg-yellow-500' title={'inprogress'} text={\"A task that is currently being worked on\"} />\r\n-              <TodoList setTodoType={setTodoType} todoType={todoType} color='bg-green-500' title={'done'} text={\"A task thats has been completed\"}/>\r\n-\r\n-            {image && (\r\n-              <div className='mt-6 relative'>\r\n-                <Image alt='Todo Image' className='w-full h-40 object-cover' src={image} width={300} height={300}/>\r\n-                 <button onClick={onRemoveImage} className='text-red-500 absolute top-0 right-0 hover:text-red-600'>\r\n-                <MdCancel className='ml-5 h-8 w-8'/>\r\n-            </button>\r\n-              </div>\r\n-            )}\r\n-\r\n-              <label   className='mt-2 h-16 cursor-pointer bg-gray-300 text-sm text-gray-500 rounded-lg border flex justify-center items-center w-full'>\r\n-     \r\n-<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"ml-1 mr-1 w-4 h-4\">\r\n-  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5m-13.5-9L12 3m0 0l4.5 4.5M12 3v13.5\" />\r\n-</svg>\r\n-     Upload\r\n-<input type=\"file\" onChange={onSelectImage} className='hidden' accept=\"image/*\"  />\r\n-\r\n-        </label>\r\n-        \r\n-\r\n-          </ModalBody>\r\n-\r\n-          <ModalFooter>\r\n-            <Button variant='ghost' onClick={onSubmit}>Add Task</Button>\r\n-          </ModalFooter>\r\n-        </ModalContent>\r\n-      </Modal>\r\n-    </div>\r\n-)\r\n-}\r\n-\r\n export default EditModal\n\\ No newline at end of file\n"
                },
                {
                    "date": 1699118071678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n   Button,\r\n   Input,\r\n } from '@chakra-ui/react'\r\n \r\n-import { TypedColumn } from \"@/typings\"\r\n+import { Image, TypedColumn } from \"@/typings\"\r\n import TodoList from \"./TodoList\"\r\n import Image from \"next/image\"\r\n import { MdCancel } from \"react-icons/md\"\r\n import { useBoardStore } from \"@/store/BoardStore\"\r\n"
                },
                {
                    "date": 1699118081347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,12 +24,12 @@\n   onOpen:()=>void,\r\n   todoType:TypedColumn,\r\n   setTodoType:(todo:TypedColumn)=>void,\r\n   title:string,\r\n-  Image:\r\n+  image:Image\r\n }\r\n \r\n- const EditModal=({title,isOpen,onClose,onOpen,todoType,setTodoType}:Props)=>{\r\n+ const EditModal=({image,title,isOpen,onClose,onOpen,todoType,setTodoType}:Props)=>{\r\n   const [image,setImage]=useState('')\r\n   const [task,setTask]=useState(title)\r\n   const addToDB=useBoardStore((state)=>state.addToDB)\r\n \r\n"
                },
                {
                    "date": 1699118086807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n   onOpen:()=>void,\r\n   todoType:TypedColumn,\r\n   setTodoType:(todo:TypedColumn)=>void,\r\n   title:string,\r\n-  image:Image\r\n+  image:Image |null\r\n }\r\n \r\n  const EditModal=({image,title,isOpen,onClose,onOpen,todoType,setTodoType}:Props)=>{\r\n   const [image,setImage]=useState('')\r\n"
                },
                {
                    "date": 1699118098018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n   onOpen:()=>void,\r\n   todoType:TypedColumn,\r\n   setTodoType:(todo:TypedColumn)=>void,\r\n   title:string,\r\n-  image:Image |null\r\n+  image:Image | null |undefined\r\n }\r\n \r\n  const EditModal=({image,title,isOpen,onClose,onOpen,todoType,setTodoType}:Props)=>{\r\n   const [image,setImage]=useState('')\r\n"
                },
                {
                    "date": 1699118144037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n   onOpen:()=>void,\r\n   todoType:TypedColumn,\r\n   setTodoType:(todo:TypedColumn)=>void,\r\n   title:string,\r\n-  image:Image | null |undefined\r\n+  imageList:Image | null |undefined\r\n }\r\n \r\n  const EditModal=({image,title,isOpen,onClose,onOpen,todoType,setTodoType}:Props)=>{\r\n   const [image,setImage]=useState('')\r\n"
                },
                {
                    "date": 1699118196979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n   Button,\r\n   Input,\r\n } from '@chakra-ui/react'\r\n \r\n-import { Image, TypedColumn } from \"@/typings\"\r\n+import { ImageObject, TypedColumn } from \"@/typings\"\r\n import TodoList from \"./TodoList\"\r\n import Image from \"next/image\"\r\n import { MdCancel } from \"react-icons/md\"\r\n import { useBoardStore } from \"@/store/BoardStore\"\r\n@@ -27,9 +27,9 @@\n   title:string,\r\n   imageList:Image | null |undefined\r\n }\r\n \r\n- const EditModal=({image,title,isOpen,onClose,onOpen,todoType,setTodoType}:Props)=>{\r\n+ const EditModal=({imageList,title,isOpen,onClose,onOpen,todoType,setTodoType}:Props)=>{\r\n   const [image,setImage]=useState('')\r\n   const [task,setTask]=useState(title)\r\n   const addToDB=useBoardStore((state)=>state.addToDB)\r\n \r\n"
                },
                {
                    "date": 1699118210348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n   onOpen:()=>void,\r\n   todoType:TypedColumn,\r\n   setTodoType:(todo:TypedColumn)=>void,\r\n   title:string,\r\n-  imageList:Image | null |undefined\r\n+  imageList:ImageObject | null |undefined\r\n }\r\n \r\n  const EditModal=({imageList,title,isOpen,onClose,onOpen,todoType,setTodoType}:Props)=>{\r\n   const [image,setImage]=useState('')\r\n"
                },
                {
                    "date": 1699118241446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n   imageList:ImageObject | null |undefined\r\n }\r\n \r\n  const EditModal=({imageList,title,isOpen,onClose,onOpen,todoType,setTodoType}:Props)=>{\r\n-  const [image,setImage]=useState()\r\n+  const [image,setImage]=useState(i)\r\n   const [task,setTask]=useState(title)\r\n   const addToDB=useBoardStore((state)=>state.addToDB)\r\n \r\n    const onSelectImage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n"
                },
                {
                    "date": 1699118368862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n           </ModalBody>\r\n \r\n           <ModalFooter>\r\n             <Button variant='ghost' onClick={onSubmit}>Edit Task</Button>\r\n-            <Button variant='ghost' colorScheme=\"\" onClick={onSubmit}>Delete Task</Button>\r\n+            <Button variant='ghost' colorScheme=\"R\" onClick={onSubmit}>Delete Task</Button>\r\n           </ModalFooter>\r\n         </ModalContent>\r\n       </Modal>\r\n     </div>\r\n"
                }
            ],
            "date": 1699116648894,
            "name": "Commit-0",
            "content": "tsr"
        }
    ]
}